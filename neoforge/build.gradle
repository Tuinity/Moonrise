import net.neoforged.moddevgradle.internal.RunGameTask
import java.nio.file.Files

plugins {
    id("net.neoforged.moddev")
    id 'maven-publish'
    id 'com.gradleup.shadow'
}

repositories {
    maven {
        name = 'NeoForged'
        url = 'https://maven.neoforged.net/releases/'
    }
}

def aw2at = Aw2AtTask.configureDefault(
    getProject(),
    rootProject.layout.projectDirectory.file("src/main/resources/moonrise.accesswidener").getAsFile(),
    sourceSets.main
)

neoForge {
    version = rootProject.neoforge_version
    validateAccessTransformers = true
    accessTransformers.files.setFrom(aw2at.flatMap { t -> t.getOutputFile() })
    runs {
        client {
            client()
            mods.set([]) // Work around classpath issues by using the production jar for dev runs
        }
        server {
            server()
            mods.set([]) // Work around classpath issues by using the production jar for dev runs
        }
    }
}

configurations.implementation {
    extendsFrom(configurations.shadow)
}

dependencies {
    add('shadow', project(":"))

    shadow("ca.spottedleaf:concurrentutil:${rootProject.concurrentutil_version}")
    shadow("org.yaml:snakeyaml:${rootProject.snakeyaml_version}")

    implementation "me.shedaniel.cloth:cloth-config-neoforge:${rootProject.cloth_version}"
    jarJar "me.shedaniel.cloth:cloth-config-neoforge:${rootProject.cloth_version}"
}

// Work around classpath issues by using the production jar for dev runs
tasks.withType(RunGameTask).configureEach {
    dependsOn(tasks.shadowJar)
    doFirst {
        def jar = file("run/mods/main.jar")
        jar.parentFile.mkdirs()
        jar.delete()
        Files.copy(tasks.shadowJar.archiveFile.get().asFile.toPath(), jar.toPath())
    }
}

processResources {
    inputs.property "version", project.version

    filesMatching("META-INF/neoforge.mods.toml") {
        expand "version": project.version, "minecraft_version": minecraft_version, "loader_version": loader_version, "mod_version": mod_version
    }
}

jar {
    archiveClassifier = ""
}

shadowJar {
    archiveClassifier = ""
    destinationDirectory = layout.buildDirectory.dir("libs")
    configurations = [project.configurations.shadow]
    relocate 'ca.spottedleaf.concurrentutil', 'ca.spottedleaf.moonrise.libs.ca.spottedleaf.concurrentutil'
    relocate 'org.yaml.snakeyaml', 'ca.spottedleaf.moonrise.libs.org.yaml.snakeyaml'
}

publishMods {
    file = shadowJar.archiveFile
    modLoaders = ["neoforge"]

    modrinth {
        incompatible(
            "notenoughcrashes",
            "starlight-neoforge",
            "canary"
        )
    }
    curseforge {
        incompatible(
            "not-enough-crashes-forge",
            "starlight-neoforge",
            "canary"
        )
    }
}
